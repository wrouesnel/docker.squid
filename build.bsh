#!/bin/bash
# See: https://stackoverflow.com/questions/59895/how-to-get-the-source-directory-of-a-bash-script-from-within-the-script-itself
# Note: you can't refactor this out: its at the top of every script so the scripts can find their includes.
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

function log() {
  echo "$*" 1>&2
}

function fatal() {
  echo "$*" 1>&2
  exit 1
}

pushd "${SCRIPT_DIR}" >/dev/null || fatal "Could not change directory"

docker=$(which docker)
if [ ! -x "$docker" ] && [ -x "$(which podman)" ]; then
    docker="$(which podman)"
fi

# detect and set http_proxy using local script
APT_PROXY_CMD=$(cat /etc/apt/apt.conf /etc/apt/apt.conf.d/* 2> /dev/null |
 				grep -v -e ^# -e ^\/\/ -e ^$ | 
                grep Acquire::http::ProxyAutoDetect |
                sed 's/Acquire::http::ProxyAutoDetect\ //' | sed '$s/;$//')

# did we get an apt proxy cmd?
if [ ! -z "$APT_PROXY_CMD" ]; then
	echo "Trying to detect proxy using apt script..."
	deb_proxy=$(bash -c "$APT_PROXY_CMD")
else
	# try and get just a regular proxy
	deb_proxy=$(cat /etc/apt/apt.conf /etc/apt/apt.conf.d/* 2> /dev/null |
	 				grep -v -e ^# -e ^\/\/ -e ^$ | 
		            grep 'Acquire::http::ProxyAutoDetect ' |
		            sed 's/Acquire::http::Proxy\ //' | sed '$s/;$//' | tr -d '"' )
fi

"$docker" build \
    --iidfile .dockerid \
    --build-arg=http_proxy="$deb_proxy" \
    --build-arg=https_proxy="$deb_proxy" \
    --build-arg=CONCURRENCY="$(grep -c processor /proc/cpuinfo)" \
    -t wrouesnel/docker.squid docker-squid
